head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	93.07.20.18.01.16;	author se;	state Exp;
branches;
next	1.7;

1.7
date	92.07.30.12.14.25;	author se;	state Exp;
branches;
next	1.6;

1.6
date	92.07.08.18.44.34;	author se;	state Exp;
branches;
next	1.5;

1.5
date	92.07.08.06.24.31;	author se;	state Exp;
branches;
next	1.4;

1.4
date	92.06.10.11.22.38;	author se;	state Exp;
branches;
next	1.3;

1.3
date	92.02.19.00.04.34;	author se;	state Exp;
branches;
next	1.2;

1.2
date	92.02.13.16.19.08;	author se;	state Exp;
branches;
next	1.1;

1.1
date	92.02.03.17.53.37;	author se;	state Exp;
branches;
next	;


desc
@header file for mat_types.c
@


1.8
log
@modified for use with access method module
@
text
@/*
 * mat_types.h:		Copyright 1992 by 
 *			Stefan Esser
 *			Institut for Nuclear Physics
 *			University of Cologne, Germany
 *
 */

#include "mfile.h"

/* $Id: mat_types.h,v 1.7 1992/07/30 12:14:25 se Exp $
 *
 * $Log: mat_types.h,v $
 * Revision 1.7  1992/07/30  12:14:25  se
 * add copyright note
 *
 * Revision 1.6  1992/07/08  18:44:34  se
 * reestablished traditional function declarations for compatibility with
 * non ANSI compilers
 *
 * Revision 1.5  92/07/08  06:24:31  06:24:31  se (Stefan Esser)
 * removed parameter declaration from definitions of getf and putf
 * 
 * Revision 1.4  1992/06/10  11:22:38  se
 * struct matproc now contains additional fields:
 * getf(), putf() are pointers to get/put functions,
 * datatype contains info on int/float and range of the data
 *
 * Revision 1.3  1992/02/19  00:04:34  se
 * mat_types now defines access functions instead of making the matproc[]
 * array available
 *
 * Revision 1.2  1992/02/13  16:19:08  se
 * RCS Id and Log entries added
 *
 */

#if defined(__STDC__) || defined(__cplusplus)
# define P_(s) s
# define CONST const
#else
# define P_(s) ()
# define CONST /* */
#endif

typedef void mprobef P_((MFILE *mat));
typedef void minitf P_((MFILE *mat));
typedef int  mgetf P_((MFILE *mat, void* buf, int v, int l, int c, int n));
typedef int  mputf P_((MFILE *mat, void* buf, int v, int l, int c, int n));

void matproc_guessfiletype P_((MFILE *mat));
void matproc_init P_((MFILE *mat));
int matproc_filetype P_((CONST char *fmtname));
char *matproc_fmtname P_((int filetype));
int matproc_datatype P_((int filetype));
mgetf* matproc_getf P_((int filetype));
mputf* matproc_putf P_((int filetype));

typedef char fmtnametype[7];

typedef struct 
{
  int		filetype;
  fmtnametype	fmtname;
  int		datatype;
  mgetf		*mget;
  mputf		*mput;
  mprobef	*mprobe;
  minitf	*minit;
} matprocs;

@


1.7
log
@add copyright note
@
text
@d11 1
a11 1
/* $Id: mat_types.h,v 1.6 1992/07/08 18:44:34 se Exp $
d14 3
d46 4
a49 4
typedef void (*probef)P_((MFILE *mat));
typedef void (*initf)P_((MFILE *mat));
typedef int  (*getf)P_((/*MFILE *mat, void* buf, int v, int l, int c, int n*/));
typedef int  (*putf)P_((/*MFILE *mat, void* buf, int v, int l, int c, int n*/));
d56 2
a57 2
getf matproc_getf P_((int filetype));
putf matproc_putf P_((int filetype));
d66 4
a69 4
  getf		mgetf;
  putf		mputf;
  probef	mprobef;
  initf		minitf;
@


1.6
log
@reestablished traditional function declarations for compatibility with
non ANSI compilers
@
text
@d1 8
d11 6
a16 1
/* $Id: mat_types.h,v 1.4 1992/06/10 11:22:38 se Exp $
a17 1
 * $Log:	mat_types.h,v $
@


1.5
log
@removed parameter declaration from definitions of getf and putf
@
text
@d5 4
a8 1
 * $Log: mat_types.h,v $
d25 1
d28 1
d38 1
a38 1
int matproc_filetype P_((const char *fmtname));
@


1.4
log
@struct matproc now contains additional fields:
getf(), putf() are pointers to get/put functions,
datatype contains info on int/float and range of the data
@
text
@d3 1
a3 1
/* $Id: mat_types.h,v 1.3 1992/02/19 00:04:34 se Exp $
d6 5
d28 2
a29 2
typedef int  (*getf)P_((MFILE *mat, void* buf, int v, int l, int c, int n));
typedef int  (*putf)P_((MFILE *mat, void* buf, int v, int l, int c, int n));
@


1.3
log
@mat_types now defines access functions instead of making the matproc[]
array available
@
text
@d3 1
a3 1
/* $Id: mat_types.h,v 1.2 1992/02/13 16:19:08 se Exp $
d6 4
d21 5
d28 1
d30 17
a46 2
int matproc_filetype P_((const char *fmtname));
     
@


1.2
log
@RCS Id and Log entries added
@
text
@a0 1
#include <sys/types.h>
d3 1
a3 1
/* $Id$
d5 4
a8 1
 * $Log$
d11 5
a15 10
typedef void (*probef)(MFILE *mat);
typedef void (*initf)(MFILE *mat);

typedef struct 
{
  u_int		filetype;
  probef	mprobef;
  initf		minitf;
  char		fmtname[7];
} matprocs;
d17 5
a21 2
extern matprocs matproc[];
  
@


1.1
log
@Initial revision
@
text
@d4 5
@
