head	1.11;
access;
symbols;
locks;
comment	@ * @;


1.11
date	92.07.30.12.09.41;	author se;	state Exp;
branches;
next	1.10;

1.10
date	92.07.08.18.44.34;	author se;	state Exp;
branches;
next	1.9;

1.9
date	92.03.31.01.53.38;	author se;	state Exp;
branches;
next	1.8;

1.8
date	92.03.17.15.11.37;	author se;	state Exp;
branches;
next	1.7;

1.7
date	92.02.18.23.23.29;	author se;	state Exp;
branches;
next	1.6;

1.6
date	92.02.17.23.13.27;	author se;	state Exp;
branches;
next	1.5;

1.5
date	92.02.17.17.52.56;	author se;	state Exp;
branches;
next	1.4;

1.4
date	92.02.15.17.22.42;	author se;	state Exp;
branches;
next	1.3;

1.3
date	92.02.14.19.22.46;	author se;	state Exp;
branches;
next	1.2;

1.2
date	92.02.13.14.37.45;	author se;	state Exp;
branches;
next	1.1;

1.1
date	92.02.03.17.38.25;	author se;	state Exp;
branches;
next	;


desc
@call matrix file specific I/O routines using function pointers 
@


1.11
log
@added copyright note
@
text
@/*
 * callindir.c:		Copyright 1992 by 
 *			Stefan Esser
 *			Institut for Nuclear Physics
 *			University of Cologne, Germany
 *
 */

#include "mfile.h"
#include "callindir.h"
#include "converters.h"
#include "mat_types.h"
#include "mopen.h"

static char rcsid[] = "$Id: callindir.c,v 1.10 1992/07/08 18:44:34 se Exp $";

/* $Log: callindir.c,v $
 * Revision 1.10  1992/07/08  18:44:34  se
 * reestablished traditional function declarations for compatibility with
 * non ANSI compilers
 *
 * Revision 1.9  92/03/31  01:53:38  01:53:38  se (Stefan Esser)
 * added includes of converters.h and mat_types.h
 * 
 * Revision 1.8  1992/03/17  15:11:37  se
 * added paramok makro to check for validity of parameters
 *
 * Revision 1.7  1992/02/18  23:23:29  se
 * changed according to changes in mat_types.c
 *
 * Revision 1.6  1992/02/17  23:13:27  se
 * now handles reding/writing of int/float/double data into any supported
 * format.
 *
 * Revision 1.5  1992/02/17  17:52:56  se
 * now calls installconverters() to convert between different internal
 * represenattions (int, float, double)
 *
 * Revision 1.4  1992/02/15  17:22:42  se
 * name change: mget -> mgetint for consistency reasons ...
 *
 * Revision 1.3  1992/02/14  19:22:46  se
 * added hooks for floating point spectra and matrixes
 *
 * Revision 1.2  1992/02/13  14:37:45  se
 * added rcsid[]
 *
 */


#define paramok(mat, buffer, level, line, col, num)			    \
					(				    \
					 mat &&				    \
					 buffer &&			    \
					 (u_int)level < mat->levels	&&  \
					 (u_int)line  < mat->lines	&&  \
					 (u_int)col   < mat->columns	&&  \
					 (u_int)num   <= mat->columns	&&  \
					 (u_int)(col + num) <= mat->columns \
					)

int mgetint (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     int *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    if (f = mat->mgeti4f) return f (mat, buffer, level, line, col, num);
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mgeti4f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

int mputint (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     int *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    mat->status |= (MST_DIRTY | MST_DIMSFIXED);

    if (f = mat->mputi4f) return f (mat, buffer, level, line, col, num);
    if (mat->filetype == MAT_UNKNOWN) mat->filetype = MAT_STD_INT;
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mputi4f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

/*------------------------------------------------------------------------*/

int mgetflt (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     float *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    if (f = mat->mgetf4f) return f (mat, buffer, level, line, col, num);
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mgetf4f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

int mputflt (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     float *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    mat->status |= (MST_DIRTY | MST_DIMSFIXED);

    if (f = mat->mputf4f) return f (mat, buffer, level, line, col, num);
    if (mat->filetype == MAT_UNKNOWN) mat->filetype = MAT_STD_FLT;
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mputf4f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

/*------------------------------------------------------------------------*/

int mgetdbl (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     double *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    if (f = mat->mgetf8f) return f (mat, buffer, level, line, col, num);
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mgetf8f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

int mputdbl (mat, buffer, level, line, col, num)
     MFILE *mat;
     int level, line, col, num;
     double *buffer;
{
  int (*f)();

  /* sanity checks */
  if (paramok(mat, buffer, level, line, col, num)) {

    mat->status |= (MST_DIRTY | MST_DIMSFIXED);

    if (f = mat->mputf8f) return f (mat, buffer, level, line, col, num);
    if (mat->filetype == MAT_UNKNOWN) mat->filetype = MAT_STD_DBL;
    matproc_init (mat);
    installconverters (mat);
    if (f = mat->mputf8f) return f (mat, buffer, level, line, col, num);
  }
  return -1;
}

@


1.10
log
@reestablished traditional function declarations for compatibility with
non ANSI compilers
@
text
@d1 8
d15 1
a15 1
static char rcsid[] = "$Id: callindir.c,v 1.8 1992/03/17 15:11:37 se Exp $";
d17 5
a21 1
/* $Log:	callindir.c,v $
@


1.9
log
@added includes of converters.h and mat_types.h
@
text
@d9 4
a12 1
/* $Log: callindir.c,v $
@


1.8
log
@added paramok makro to check for validity of parameters
@
text
@d3 2
d7 1
a7 1
static char rcsid[] = "$Id: callindir.c,v 1.7 1992/02/18 23:23:29 se Exp $";
d10 3
@


1.7
log
@changed according to changes in mat_types.c
@
text
@d5 1
a5 1
static char rcsid[] = "$Id: callindir.c,v 1.6 1992/02/17 23:13:27 se Exp $";
d8 3
d31 11
d50 2
a51 8
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {

    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;
    
d68 1
a68 7
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {

    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;
d91 1
a91 4
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {
a92 3
    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;

d109 1
a109 7
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {

    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;
d132 1
a132 4
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {
a133 3
    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;

d150 1
a150 7
  if (mat && buffer && 
      (u_int)level < mat->levels &&
      (u_int)line  < mat->lines  &&
      (u_int)col   < mat->columns) {

    if ((u_int)col + (u_int)num > mat->columns)
      num = mat->columns - col;
@


1.6
log
@now handles reding/writing of int/float/double data into any supported
format.
@
text
@d5 1
a5 1
static char rcsid[] = "$Id: callindir.c,v 1.5 1992/02/17 17:52:56 se Exp $";
d8 4
d45 1
a45 1
    initspecinfo (mat);
d72 1
a72 1
    initspecinfo (mat);
d98 1
a98 1
    initspecinfo (mat);
d125 1
a125 1
    initspecinfo (mat);
d151 1
a151 1
    initspecinfo (mat);
d178 1
a178 1
    initspecinfo (mat);
@


1.5
log
@now calls installconverters() to convert between different internal
represenattions (int, float, double)
@
text
@d5 1
a5 1
static char rcsid[] = "$Id: callindir.c,v 1.4 1992/02/15 17:22:42 se Exp $";
d8 4
d67 1
d120 1
d173 1
@


1.4
log
@name change: mget -> mgetint for consistency reasons ...
@
text
@d5 1
a5 1
static char rcsid[] = "$Id: callindir.c,v 1.3 1992/02/14 19:22:46 se Exp $";
d8 3
d35 1
a35 1

d38 1
d64 1
d90 1
d116 1
d142 1
d168 1
@


1.3
log
@added hooks for floating point spectra and matrixes
@
text
@d5 1
a5 1
static char rcsid[] = "$Id: callindir.c,v 1.2 1992/02/13 14:37:45 se Exp $";
d8 3
d17 1
a17 1
int mget (mat, buffer, level, line, col, num)
d40 1
a40 1
int mput (mat, buffer, level, line, col, num)
@


1.2
log
@added rcsid[]
@
text
@d5 1
a5 1
static char rcsid[] = "$Id$";
d7 4
a10 1
/* $Log$
d58 100
@


1.1
log
@Initial revision
@
text
@d5 6
@
