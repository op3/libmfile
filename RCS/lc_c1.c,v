head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	92.07.30.12.09.41;	author se;	state Exp;
branches;
next	1.7;

1.7
date	92.07.08.21.03.39;	author se;	state Exp;
branches;
next	1.6;

1.6
date	92.07.08.18.44.34;	author se;	state Exp;
branches;
next	1.5;

1.5
date	92.06.30.14.36.08;	author se;	state Exp;
branches;
next	1.4;

1.4
date	92.03.31.01.57.06;	author se;	state Exp;
branches;
next	1.3;

1.3
date	92.03.17.15.06.45;	author se;	state Exp;
branches;
next	1.2;

1.2
date	92.02.13.14.37.45;	author se;	state Exp;
branches;
next	1.1;

1.1
date	92.02.03.17.38.25;	author se;	state Exp;
branches;
next	;


desc
@compression and decompression subroutines version 1 for line compressed 
integer matrix file
@


1.8
log
@added copyright note
@
text
@/*
 * lc_c1.c:		Copyright 1992 by 
 *			Stefan Esser
 *			Institut for Nuclear Physics
 *			University of Cologne, Germany
 *
 */

#include <sys/types.h>
#include "lc_c1.h"

static char rcsid[] = "$Id: lc_c1.c,v 1.7 1992/07/08 21:03:39 se Exp $";

/* $Log: lc_c1.c,v $
 * Revision 1.7  1992/07/08  21:03:39  se
 * general cleanup for strictest GCC warning levels
 *
 * Revision 1.6  1992/07/08  18:44:34  se
 * reestablished traditional function declarations for compatibility with
 * non ANSI compilers
 *
 * Revision 1.5  92/06/30  14:36:08  14:36:08  se (Stefan Esser)
 * changed some types from unsigned to signed char and int
 * 
 * Revision 1.4  1992/03/31  01:57:06  se
 * changed some occurances of | (bitwise OR) into + (ADD)
 *
 * Revision 1.3  1992/03/17  15:06:45  se
 * changed type of lc_compress() to return int instead of u_int.
 * return codes are -1 in case of error, nuber of bytes after compression else
 *
 * Revision 1.2  1992/02/13  14:37:45  se
 * added rcsid[]
 *
 */


#define encode(i)	(encodetmp = *(src +(i)),			\
			 diff = encodetmp - last, last = encodetmp,	\
			 diff >= 0 ? (diff << 1) : ~(diff << 1))

#define fitsinto(i,n)	(((i) >> n) == 0)

#define put_3_2(a,b,c)	(*dest++ =        (a) + ((b) << 2) + ((c) << 4))

#define put_2_3(a,b)	(*dest++ = 0x40 + (a) + ((b) << 3))

#define put_1_6(a)	(*dest++ = 0x80 + (a))

#define put_1_n(a)	do {	/* a has to be UNsigned int !!! */	\
			  *dest++ = 0xC0 | (a);				\
			  (a) >>= 6;					\
			  while (!fitsinto(a,7)) {			\
			    *dest++ = 0x80 | (a);			\
			    (a) >>= 7;					\
			  }						\
			  *dest++ = (a);				\
			} while (0)


/* liefert Anzahl Bytes nach Kompression oder -1 bei Fehler */

int lc1_compress (dest, src, num)
     char *dest;
     int *src;
     int num;
{
  int last = 0;
  char *p = dest;
  
  while (num) {
    int diff, encodetmp;
    u_int a;

    a = encode (0);
    if (fitsinto (a, 3) && (num >= 2)) {
      int last_a = last;
      u_int b = encode (1);

      if (fitsinto (a|b, 2) && (num >= 3)) {
	int last_b = last;
        u_int c = encode (2);
	
	if (fitsinto (/*a|b|*/ c, 2)) {
	  put_3_2 (a, b, c); src += 3; num -= 3; continue;
	}
	last = last_b;
      }
      if (fitsinto (/*a|*/ b, 3)) {
	put_2_3 (a, b); src += 2; num -= 2; continue;
      }
      last = last_a;
    }
    if (fitsinto (a, 6)) {
      put_1_6 (a); src++ ; num-- ; continue;
    }
    put_1_n (a); src++ ; num-- ; continue;
  }
  return (dest - p);
}


#define decode(i)	(last += ((i) & 1) ? ~((u_int)(i) >> 1) : (i) >> 1 )

#define bitextract(i,p,l) (((i) >> p) & ((1 << (l)) -1))

int lc1_uncompress (dest, src, num) 
     int *dest;
     char *src;
     int num;
{
  int last = 0;
  int nleft = num;
  
  while (nleft) {
    u_int i;
    u_char t = *src++;
    switch (t >> 6) {
    case 0:				/* 3*2 */
      nleft -= 3;
      if (nleft < 0) return -1;
      {
	i = bitextract (t, 0, 2);
	*dest++ = decode (i);
	i = bitextract (t, 2, 2);
	*dest++ = decode (i);
	i = bitextract (t, 4, 2);
	*dest++ = decode (i);
      }
      break;
    case 1:				/* 2*3 */
      nleft -= 2;
      if (nleft < 0) return -1;
      {
	i = bitextract (t, 0, 3);
	*dest++ = decode (i);
	i = bitextract (t, 3, 3);
	*dest++ = decode (i);
      }
      break;
    case 2:				/* 1*6 */
      nleft--;
      {
	i = bitextract (t, 0, 6);
	*dest++ = decode (i);
      }
      break;
    case 3:				/* 1*N */
      nleft--;
      {
	int s = 6;
	i = bitextract (t, 0, 6);
	do {
	  t = *src++;
	  i += (bitextract (t, 0, 7) << s);
	  s += 7;
	} while (t & 0x80);
	*dest++ = decode (i);
      }
      break;
    }
  }
  return num;
}

unsigned int lc1_comprlinelenmax (col)
     unsigned int col;
{
  return ((col * 5) +3) & -4;
}

@


1.7
log
@general cleanup for strictest GCC warning levels
@
text
@d1 8
d12 1
a12 1
static char rcsid[] = "$Id: lc_c1.c,v 1.6 1992/07/08 18:44:34 se Exp $";
d15 3
@


1.6
log
@reestablished traditional function declarations for compatibility with
non ANSI compilers
@
text
@d4 1
a4 1
static char rcsid[] = "$Id: lc_c1.c,v 1.4 1992/03/31 01:57:06 se Exp $";
d6 5
a10 1
/* $Log:	lc_c1.c,v $
d155 2
a156 2
int lc1_comprlinelenmax (col)
     int col;
@


1.5
log
@changed some types from unsigned to signed char and int
@
text
@d6 4
a9 1
/* $Log: lc_c1.c,v $
d151 2
a152 1
int lc1_comprlinelenmax (int col)
@


1.4
log
@changed some occurances of | (bitwise OR) into + (ADD)
@
text
@d4 1
a4 1
static char rcsid[] = "$Id: lc_c1.c,v 1.3 1992/03/17 15:06:45 se Exp $";
d7 3
d46 1
a46 1
     u_char *dest;
d51 1
a51 1
  u_char *p = dest;
d91 1
a91 1
     u_char *src;
d148 1
a148 1
u_int lc1_comprlinelenmax (u_int col)
@


1.3
log
@changed type of lc_compress() to return int instead of u_int.
return codes are -1 in case of error, nuber of bytes after compression else
@
text
@d4 1
a4 1
static char rcsid[] = "$Id: lc_c1.c,v 1.2 1992/02/13 14:37:45 se Exp $";
d7 4
d25 1
a25 1
#define put_2_3(a,b)	(*dest++ = 0x40 | (a) + ((b) << 3))
d27 1
a27 1
#define put_1_6(a)	(*dest++ = 0x80 | (a))
@


1.2
log
@added rcsid[]
@
text
@d4 1
a4 1
static char rcsid[] = "$Id$";
d6 4
a9 1
/* $Log$
d35 4
a38 1
u_int lc1_compress (dest, src, num)
d82 1
a82 1
void lc1_uncompress (dest, src, num) 
d88 3
a90 2

  while (num) {
d95 10
a104 7
      i = bitextract (t, 0, 2);
      *dest++ = decode (i);
      i = bitextract (t, 2, 2);
      *dest++ = decode (i);
      i = bitextract (t, 4, 2);
      *dest++ = decode (i);
      num -= 3;
d107 8
a114 5
      i = bitextract (t, 0, 3);
      *dest++ = decode (i);
      i = bitextract (t, 3, 3);
      *dest++ = decode (i);
      num -= 2;
d117 5
a121 3
      i = bitextract (t, 0, 6);
      *dest++ = decode (i);
      num--;
d124 1
a134 1
      num--;
d138 1
@


1.1
log
@Initial revision
@
text
@d4 6
@
