head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	92.02.17.23.51.37;	author se;	state Exp;
branches;
next	1.1;

1.1
date	92.02.13.16.21.04;	author se;	state Exp;
branches;
next	;


desc
@Manual entry for 'libmfile.a'
@


1.2
log
@Added function definitions for m{get,put}{flt,dbl}().
@
text
@.TH mfile 3ikp
.SH Name
mopen, mclose, mgetint, mgetflt, mgetdbl, mputint, mputflt, mputdbl, mgetfmt, msetfmt \- coincidence matrix access functions
.ig00
$Id: mfile.3ikp,v 1.1 1992/02/13 16:21:04 se Exp $
$Log: mfile.3ikp,v $
# Revision 1.1  1992/02/13  16:21:04  se
# Initial revision
#
.00
.SH Syntax
.nf
.B #include <local/mfile.h> 
.PP
.B MFILE *mopen (\fIname\fP, \fImode\fP)
.B char *\fIname\fP;
.B char *\fImode\fP;
.PP
.B int mclose (\fImat\fP)
.B MFILE *\fImat\fP;
.PP
.B 
int mgetint (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B int *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
.B 
int mgetflt (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B float *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
.B 
int mgetdbl (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B double *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
.B 
int mputint (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B int *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
int mputflt (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B float *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
int mputdbl (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
.B MFILE *\fImat\fP;
.B double *\fIbuffer\fP;
.B int \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP;
.PP
.B int mgetinfo (\fImat\fP, \fIinfo\fP)
.B MFILE *\fImat\fP;
.B minfo *\fIinfo\fP;
.PP
.B int msetinfo (\fImat\fP, \fIinfo\fP)
.B MFILE *\fImat\fP;
.B minfo *\fIinfo\fP;
.PP
.B int mgetfmt (\fImat\fP, \fIformat\fP)
.B MFILE *\fImat\fP;
.B char *\fIformat\fP;
.PP
.B int msetfmt (\fImat\fP, \fIformat\fP)
.B MFILE *\fImat\fP;
.B char *\fIformat\fP;
.PP
.B int load_spec (\fIname\fP, \fIbuffer\fP, \fInum\fP)
.B char *\fIname\fP;
.B int *\fIbuf\fP;
.B int \fInum\fP;
.PP
.B int save_spec (\fIname\fP, \fIbuffer\fP, \fInum\fP)
.B char *\fIname\fP;
.B int *\fIbuf\fP;
.B int \fInum\fP;
.fi
.SH Description
These functions allow machine independent and efficient access to 
coincidence matrices. Traditional matrices (long and short, VAX and 
HighEndian) can be read and written, but some special formats are 
supported, which reduce the storage requirements by a factor of 3 to 10.
The main goal was to provide an abstract interface for simple  
access to matrix files, independent of their format, and to make 
it possible to use these programs with new formats by simply relinking 
them with an extended version of the library libmat.a.
.PP
The
.PN mopen
subroutine
opens a matrix file named 
.I name\^
for reading and/or writing as specified by 
.I mode\^
and returns a pointer to a struct MFILE on success or 
NULL 
in case of an error.
Currently defined values of 
.I mode\^
are "r" for read only "w" for write only and "r+" for read write access.
.PP
The
.PN mclose
subroutine
closes the matrix file and returns 0 on success, \-1 on failure.
.PP
The
.PN mgetint
subroutine reads 
.I num\^
matrix elements starting at level
.IR level ,
line
.IR line ,
and column
.I column\^
from the previously opened matrix file specified by 
.I mat\^
into the array of long integers
.IR buffer .
It returns the number of elements actually read on success 
or \-1 in case of a fatal error.
.PP
The 
.PN mputint
subroutine writes 
.I num\^
elements into the matrix file. Parameters and return codes are 
the same as returned by 
.IR mget .
.PP
The
.I mgetinfo\^ 
subroutine 
.PP
The
.I msetinfo\^ 
subroutine 
.PP
The
.I mgetfmt\^ 
subroutine 
.PP
The
.I msetfmt\^ 
subroutine
.PP
The
.I load_spec\^ 
subroutine 
.PP
The
.I save_spec\^ 
subroutine 
.SH Example
The following code fragment lists a program that opens the matrix file 
specified by the first argument for reading and creates a new matrix 
under the name given as the second argument. Only marginal error checking 
is shown to keep the example short.

.EX

	main (argc, argv)
	int argc;
	char **argv;
	{
		MFILE *src, *dst;
		minfo info;
		int levels,lines,columns;
		int lev,lin;

	/* open both matrix files */
		src = mopen (argv[1], "r");
		dst = mopen (argc[2], "w");

	/* abort if open failed */
		if (!src || !dst) exit (1);

	/* get matrix dimensions */
		mgetinfo (src, &info);
		levels  = info.levels;
		lines   = info.lines;
		columns = info.columns;

	/* set dest matrix dims equal to src dims */
		mgetinfo (dst, &info);
		info.levels  = levels;
		info.lines   = lines;
		info.columns = columns;
		if (msetinfo (dst, &info) != 0) exit (1);

	/* allocate line buffer */
		buffer = (int *) malloc (c * sizeof(int));

	/* copy matrix line by line */
		for (lev = 0; lev < levels; lev++) {
			for (lin = 0; lin < lines; lin++) {
				mgetint (src, buffer, lev, lin, 0, columns);
				mputint (dst, buffer, lev, lin, 0, columns);
			}
		}

	/* close matrices */
		mclose (src);
		if (mclose (dst) != 0) exit (1);
		exit (0);
	}

.EE

.. .SH Hints
.. sinnvolle Fehlerchecks, Gruende fuer Fehler, 

.. .SH Compiling
.. Hinweis auf Include-File, Link-Option -lmat

.SH Restrictions
Traditional style matrizes and spectra may have at most 16384 columns.
..SH See also
..MS spec 3fera ,
..MS matrix 3fera ,
..MS recal 3fera ,
..MS window 3fera ,
..MS time 3fera ,
..MS gate_matrix 3fera
.SH Author
Stefan Esser  ( Institut of Nuclear Physics, Cologne, Germany )

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
mopen, mclose, mget, mput \- coincidence matrix access functions
d5 5
a9 2
$Id$
$Log$
d23 1
a23 1
int mget (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
d29 1
a29 1
int mput (\fImat\fP, \fIbuffer\fP, \fIlevel\fP, \fIline\fP, \fIcolumn\fP, \fInum\fP)
d31 12
d46 10
d112 1
a112 1
.PN mget
d129 1
a129 1
.PN mput
d202 2
a203 2
				mget (src, buffer, lev, lin, 0, columns);
				mput (dst, buffer, lev, lin, 0, columns);
d220 13
@
